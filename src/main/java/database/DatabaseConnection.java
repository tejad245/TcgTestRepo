package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import models.WeatherData;

public class DatabaseConnection {

    public static Connection connection;

    /**
     * 
     * @return connection object
     */
    public static Connection getConnection() {
        try {
            //Registering with mysql Driver
            Class.forName("com.mysql.cj.jdbc.Driver");
 
            // connection string using username and and password 
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/weatherrequest_history", "root", "@TestTcg1");
        } catch (Exception e) {
        	System.out.println("The error thrown : "+ e.getMessage());
            e.printStackTrace();
        }
        return (connection);
    }

    /**
     * closing the connection
     */
    public static void CloseConnection() {
        if (connection != null) {
            try {
                connection.close();
                connection = null;
            } catch (SQLException ex) {
            	System.out.println("The error thrown : "+ ex.getMessage());
                ex.printStackTrace();
            }
        }
    }

    /***
     * 
     * @param SqlQueryString
     * @param param
     * @return list of weatherdata after data is fetched
     * @throws SQLException
     */
    public static  List<WeatherData> getResultFromSqlQuery(String SqlQueryString,String param) {
    	
        List<WeatherData> weatherList= new ArrayList<>();
        try {
            if (connection == null) {
                getConnection();
            }
           PreparedStatement pstmt = connection.prepareStatement(SqlQueryString);
           pstmt.setString(1, param);
           try(ResultSet rs=pstmt.executeQuery()){
           while (rs.next())  {
               String timestamp = rs.getString("timestamp");
               double latitude = rs.getDouble("latitude");
               double longititude = rs.getDouble("longititude");
               String description = rs.getString("description");
               int temperature = rs.getInt("temperature");
               int humidity = rs.getInt("humidity");
               double windSpeed = rs.getDouble("wind_speed");
              
               //looping the result set and getting fields and adding to the list of weatherdata to return
               weatherList.add(new WeatherData(timestamp,latitude,longititude,description,temperature,humidity,windSpeed));
           }
           }
       } catch (SQLException ex) {
    	   System.out.println("The error thrown : "+ ex.getMessage());
           ex.printStackTrace();
       }
       return weatherList;
    }

    
    /**
     * 
     * @param username
     * @param postalcode
     * @return autogenerated id of after insering the username and postalcode
     */
    public static int insertUpdateFromSqlQuery(String username ,String postalcode) {
    	ResultSet rs=null;
    	int autoId=0;
        try {
            
            if (connection == null) {
                getConnection();
            }
    	   String insertQuery = "insert into user_postaldetails (username,postalcode) VALUES (?, ?)";
           PreparedStatement pstmt = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
           pstmt.setString(1, username);
           pstmt.setString(2,postalcode);
           pstmt.addBatch();
           pstmt.executeBatch();
           rs = pstmt.getGeneratedKeys();
          if (rs.next()) {
        	  System.out.println("Auto generated id after adding user details into user_postaldetails table: "+rs.getString(1));
          }
       } catch (SQLException ex) {
    	   System.out.println("The error thrown : "+ ex.getMessage());
           ex.printStackTrace();
       }

		try {
			autoId= Integer.parseInt(rs.getString(1));
		} catch (SQLException e) {
			System.out.println("The error thrown : "+ e.getMessage());
	        e.printStackTrace();
		} catch (NumberFormatException ex) {
			System.out.println("The error thrown : "+ ex.getMessage());
			ex.printStackTrace();
		}
		return autoId;
    }

    /**
     * 
     * @param timestamp
     * @param latitude
     * @param longititude
     * @param description
     * @param temperature
     * @param humidity
     * @param wind_speed
     * @param id
     * @return returns autogenerated id after inserting weatherdetails
     * @throws NumberFormatException
     * @throws SQLException
     */
	public static int insertUpdateFromSqlQueryWeather(String timestamp, double latitude, double longititude,
			String description, double temperature, int humidity, double wind_speed, int id) throws NumberFormatException, SQLException {
		ResultSet rs=null;
        try {
            //Checking whether the connection is null or null
            if (connection == null) {
                getConnection();
            }
    	   String insertQuery = "insert into weather_history (timestamp,latitude,longititude"
    	   		+ ",description,temperature,humidity,wind_speed,user_postal_id) VALUES (?, ?,?, ?,?, ?,?, ?)";
           PreparedStatement pstmt = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
           pstmt.setString(1, timestamp);
           pstmt.setDouble(2,latitude);
           pstmt.setDouble(3,longititude);
           pstmt.setString(4, description);
           pstmt.setDouble(5, temperature);
           pstmt.setInt(6, humidity);
           pstmt.setDouble(7, wind_speed);
           pstmt.setInt(8,id);
           pstmt.addBatch();
           pstmt.executeBatch();
           rs = pstmt.getGeneratedKeys();
           if (rs.next()) {
              System.out.println("Auto generated id after adding weather details into weatehrhistory table: "+rs.getString(1));
           }
       } catch (Exception ex) {
           ex.printStackTrace();
       }
       return Integer.parseInt(rs.getString(1));
	}
   
}